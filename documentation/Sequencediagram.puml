@startuml
/'last updated 21.10.2022'/
/'Sequence diagram using the PlantUML integration plugin / syntax'/
/'syntax can be found here: https://plantuml.com/de/sequence-diagram'/

actor Browser
entity DOM #red
entity DestinationTypeSelect #purple
entity Dropzone #blue
entity ProcessingButton #green
box Server #pink
    participant Django
    participant Plugin
    database DB
end box
box Server-TaskScheduler
    participant Task
    participant TaskScheduler
    participant TaskExecuterDaemon
end box


== Main View ==
Browser o-> Django: GET render_main_view()
activate Django
    Django --> Browser: main.html
deactivate Django
activate Browser
    Browser -> DOM: DOMContentLoaded
deactivate Browser
activate DOM
    DOM -> DestinationTypeSelect: init()
deactivate DOM
activate DestinationTypeSelect #lightgray
    DestinationTypeSelect -[#purple]> DestinationTypeSelect ++ : update_options()

    deactivate DestinationTypeSelect
    DestinationTypeSelect -> DestinationTypeSelect: addEventListener("onchange")

    DestinationTypeSelect [#red]->o DOM : dispatch SELECT.onchange Event
deactivate DestinationTypeSelect

== DOWNLOAD VIEW ===

Browser o-> Django: GET render_download_view()
activate Django
    Django --> Browser: download.html
deactivate Django

== SELECT EVENTS ==

group SELECT.update_options()
-[#purple]> DestinationTypeSelect
        activate DestinationTypeSelect
        DestinationTypeSelect -> ProcessingButton: deactivate()


        DestinationTypeSelect -> Django: get_possible_destination_file_types
        deactivate DestinationTypeSelect
        activate Django
            alt if request_id in request.GET
                Django -> DB: get_uploaded_file_list_of_current_request()
                activate DB
                DB --> Django: files_of_request
                deactivate DB
                note over Django: from_file_types =  [mime_type() for file in files_of_request]
            else
                note over Django: from_file_types = [None]
            end
            Django -> Plugin: get_destination_file_types of plugins
            activate Plugin
                Plugin --> Django:
            deactivate Plugin
            Django -> Django: possible_file_types = get_intersection_of_file_endings_from_different_input_filetypes()
            Django --> DestinationTypeSelect: possible_file_types
            deactivate Django
            activate DestinationTypeSelect #lightgray
            DestinationTypeSelect -> DestinationTypeSelect ++ : add_options()
            DestinationTypeSelect -> DestinationTypeSelect: clear()
            loop for option in possible_options
               DestinationTypeSelect -> DestinationTypeSelect: add option to select
            end
            alt if current_plugin is valid option
                note over DestinationTypeSelect: selected_option = current_plugin
            else
                note over DestinationTypeSelect: selected_option = 'null'
            end
            deactivate DestinationTypeSelect
             alt if select.isEmpty()
                DestinationTypeSelect -> DestinationTypeSelect: set_form_content(No Processing available for these files.)
            end
            DestinationTypeSelect -[#green]>o ProcessingButton: update()
            deactivate DestinationTypeSelect
    end

group SELECT.onchange()
-[#red]> DOM
deactivate DestinationTypeSelect
    activate DOM
    DOM -> Browser: save_plugin_in_url()
    DOM -> Browser: updateProcessedButton()
    DOM -> DestinationTypeSelect: update_allowed_input_file_types(selected_option
    deactivate DOM

    activate DestinationTypeSelect
        DestinationTypeSelect -> Django: get_allowed_input_file_types
        activate Django
            Django -> Plugin: get_input_file_types of all plugins/ the specified Plugin
            activate Plugin
            Plugin --> Django: list of types
            deactivate Plugin

            Django --> DestinationTypeSelect: allowed_file_types
        deactivate Django
            DestinationTypeSelect -> DestinationTypeSelect: save new allowed_file_types
            alt if successful selected_option === "null"
                DestinationTypeSelect -> Browser: deactivate_compression_button()
            else
                DestinationTypeSelect -> Django: get_form_html_for_web_view
                activate Django
                    Django -> Plugin: get_form_html_and_script() of plugin
                    activate Plugin
                        Plugin --> Django: form_html and form_script
                    deactivate Plugin
                Django --> DestinationTypeSelect: form_html, form_script
                deactivate Django
                DestinationTypeSelect -> Browser: set_form_content
                DestinationTypeSelect -> Browser: set_form_script
                DestinationTypeSelect -[#purple]> DestinationTypeSelect: update_options()
            end
    deactivate DestinationTypeSelect

end


== Processing Button ==
group ProcessingButton.update()
-[#green]> ProcessingButton
    activate ProcessingButton
        alt if not select.isEmpty && select.value != 'null' && dropzone.queueFinished && dropzone_files.length > 0
            ProcessingButton -> ProcessingButton: activate()
            ProcessingButton -> Browser: activate ProcessingButton
        else
            ProcessingButton -> ProcessingButton: deactivate()
            ProcessingButton -> Browser: deactivate ProcessingButton
        end
    deactivate ProcessingButton

end
group ProcessingButton.submit()
-[#green]> ProcessingButton: clicked Button
activate ProcessingButton
ProcessingButton -> DOM: compression_options_form.submit()
deactivate ProcessingButton
activate DOM
DOM -> Django: start_processing_and_show_download_view
deactivate DOM
activate Django
    Django -> DB: get ProcessingFilesRequest
    activate DB
        DB --> Django
    deactivate DB
    Django -> Plugin: get_processing_plugin_by_name
    activate Plugin
        Plugin --> Django
    deactivate Plugin
    Django -> DB: get list of UploadedFiles
    activate DB
        DB --> Django
    deactivate DB
    Django -> Plugin: get_task
    activate Plugin
        Plugin --> Django
    deactivate Plugin
    Django -> Task: Task.create()
    activate Task
        Task -> DB: add Task
        activate DB
            DB --> Task: task_id
        deactivate DB
        note over Task: save task_id
    deactivate Task
    Django ->o Browser: redirect("download/")
    deactivate Task
deactivate Django
end

== DROPZONE EVENTS ==

-[#blue]> Dropzone: addedfile
activate Dropzone
alt if not correct_file_type
    Dropzone -> Dropzone: removeFile(file)
    Dropzone -> Browser: showUnsupportedFileAnimation()
else
    note over Dropzone: queueFinished = false
    note over Dropzone: file.file_id = null
    Dropzone -> Dropzone: add RemoveButton
end
deactivate Dropzone

-[#blue]> Dropzone: removedfile
activate Dropzone
alt if files.length === 0
    note over Dropzone: queueFinished = false
end
alt if file.file_id != null
    Dropzone -> Django: remove_file
    activate Django
        Django -> DB: get file by id
        activate DB
            DB --> Django: file or null
        deactivate DB
        alt if file != null && owned by current user
            Django -> DB: file.delete()
            Django --> Dropzone: successfully deleted file
        else
            Django --> Dropzone: no file found
            deactivate Django
       end
       Dropzone -[#purple]> DestinationTypeSelect: update_options()
    deactivate Dropzone
end

-[#blue]> Dropzone: queuecomplete
activate Dropzone
alt if files.length !== 0
    note over Dropzone: queueFinished = true
    Dropzone -[#purple]> DestinationTypeSelect: update_options()
    deactivate Dropzone
end

-[#blue]> Dropzone: success
activate Dropzone
note over Dropzone: file.file_id = responseText.file_id
deactivate Dropzone

== TaskScheduler ==
Django o-> TaskExecuterDaemon: start daemon from django_app/wsgi.py
activate TaskExecuterDaemon
TaskExecuterDaemon -> TaskExecuterDaemon: start() -> run()
loop every 5 seconds
    TaskExecuterDaemon -> TaskScheduler: check_for_unfinished_tasks()
    activate TaskScheduler
        TaskScheduler -> TaskScheduler ++: get_unfinished_tasks()

        TaskScheduler -> DB: SELECT task WHERE finished=False
        activate DB
            DB --> TaskScheduler: list of tasks that are unfinished
        deactivate DB
        alt task list is none or empty
            TaskScheduler --> TaskScheduler: Result = True
        else
            TaskScheduler --> TaskScheduler: Result = False
        end
        deactivate TaskScheduler
        TaskScheduler -> TaskExecuterDaemon: Result
    deactivate TaskScheduler

    alt if unfinished Tasks exist
        TaskExecuterDaemon -> TaskScheduler: run_unfinished_tasks()
        deactivate TaskExecuterDaemon
        activate TaskScheduler
            TaskScheduler -> TaskScheduler: get_unfinished_tasks()
            loop for task in tasks
                TaskScheduler -> Task: run()
                TaskScheduler -> Task: finish_task()
                deactivate TaskScheduler
            end
    end
end

@enduml