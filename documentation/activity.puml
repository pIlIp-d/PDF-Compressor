@startuml


partition Processor {
    start
    -> process(source_path, destination_path);
    if (__source_path__ exists) then (true)
    else (false)
        -><color:#red>ValueError: No File or Folder was found at the given source_path.;
        stop
    endif
    if (__destination_path__ == "merge") then (true)
        :create single default destination file;
        note right: merged_<time>.xxx
    else (false)
    endif
    partition _get_files_and_extra_info() {
        :_get_files_and_extra_info();
        note right: default implementation
        if (__source_path__ isdir) then (true)
            :get_files_and_extra_info_from_input_folder();
            :get file list from source_folder;
            :is_splitting = False;
            :merging = len(sources) > 1 and destination_path is a file;
            if (destination_path == "default") (true)
                :output_folder = source_path + processed_files_appendix;
            else (false)
                :output_folder = destination_path;
            endif
            :create output_files_list from output_folder + input filenames + file_type_to;
        else (false)
            :get_files_and_extra_info_from_input_file();
            :is_splitting = False;
            :merging = False;
            switch (destination_path)
            case (equals "default")
                :output_folder = source_path + processed_files_appendix;
            case (is dir)
                :output_folder = destination_path + input file filename + file_type_to;
            case (else)
                :output_folder = destination_path;
            endswitch
        endif

    }
    -> source_file_list
    destination_path_list
    is_merging
    is_splitting;
    if (len(source_file_list) == 0) then (true)
        -> <color:#red>ValueError: No files to Processed were found in the source_path.;
        stop
    else (false)
    endif
    :create temporary destinations;
    if (is_merging) then (true)
        if (self.can_merge) then (true)
            :create path of final_merge_file;
        else (false)
            -> <color:#red>ValueError Merging is not supported for this Processor.;
            stop
        endif
    endif
    #lightblue:event_handlers.started_processing();
    partition Processing {
        if (self._run_multi_threaded) then (true)
            :(process_file_list_multi_threaded());
            fork
                :process_file();
            fork again
                :process_file();
            fork again
                :<b>...;
            end fork
        else (false)
            :process_file_list();
            :process_file();
            :process_file();
            :<b>...;
        endif
    }
    if (is_merging) then (true)
        :merge_files() -> final_merge_file;
    else (false)
    endif
    :move temporary destination files to final destinations;
    :clean_up_folder();
    #lightblue:event_handlers.finished_all_files();

    end
}


@enduml